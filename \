use std::fs::File;
use std::io::prelude::*;
use std::path::Path;
use std::env;

use termion::event::{Key, Event, MouseEvent};
use termion::input::{TermRead, MouseTerminal};
use termion::raw::IntoRawMode;
use std::io::{Write, stdout, stdin};

use termion::screen::*;

fn generate_map(map_s: String) -> Vec<Vec<u64>> {
    let map: Vec<Vec<u64>> = Vec::new();

    let mut max_x: u64 = 0;
    let mut max_y: u64 = 0;
    let mut x: u64 = 0;
    for ch in map_s.bytes() {
        if ch == 10 {
            x = 0;
            max_y += 1;
        } else {
            x += 1;
        }
    }

    map
}

fn main() {
    let args: Vec<String> = env::args().collect();
    if args.len() < 2 {
        eprintln!("ERROR: not provided filepath to map");
        std::process::exit(1);
    }

    let path = Path::new(&args[1]);
    let display = path.display();

    let mut file = match File::open(&path) {
        Err(why) => {
            eprintln!("ERROR: couldn't open {}: {}", display, why);
            std::process::exit(1);
        },
        Ok(file) => file,
    };

    let mut map_s = String::new();
    match file.read_to_string(&mut map_s) {
        Err(why) => {
            eprintln!("ERROR: couldn't read {}: {}", display, why);
            std::process::exit(1);
        },
        Ok(_) => {}
    }


    let map = generate_map(map_s);





    // let stdin = stdin();
    // let mut stdout = MouseTerminal::from(stdout().into_raw_mode().unwrap());

    // write!(stdout,
    //        "{}{}q to exit. Click, click, click!",
    //        termion::clear::All,
    //        termion::cursor::Goto(1, 1))
    //         .unwrap();
    // stdout.flush().unwrap();

    // for c in stdin.events() {
    //     let evt = c.unwrap();
    //     match evt {
    //         Event::Key(Key::Char('q')) => break,
    //         Event::Mouse(me) => {
    //             match me {
    //                 MouseEvent::Press(_, x, y) => {
    //                     write!(stdout, "{}x", termion::cursor::Goto(x, y)).unwrap();
    //                 }
    //                 _ => (),
    //             }
    //         }
    //         _ => {}
    //     }
    //     stdout.flush().unwrap();
    // }
        
}
